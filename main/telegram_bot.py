# import telebot
# from pybit.unified_trading import HTTP
# from telebot import types
#
# api_key = 'a3ShoNA9rAEuNWmVDI' A3zMjyshL0fc8O7pt6
# api_secret = 'O8pwP6L7kpjsoTkbvnSruRDkNcalfDVmfaDR' 4Yr8EqsGIHeUkM7adKQHw16r9eYJT8vr2EFP
# BOT_TOKEN = '7430233466:AAEzooJEC_jFbLrxxaOxr5Omx2XALd8LC_Q'
#
# bot = telebot.TeleBot(BOT_TOKEN)
# session = HTTP(
#     testnet=False,
#     api_key=api_key,
#     api_secret=api_secret,
# )
#
#
# @bot.message_handler(commands=['start'])
# def start(message):
#
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å')
#     markup.add(btn1)
#     bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!", reply_markup=markup)
#
#
# @bot.message_handler(content_types=['text'])
# def get_text_messages(message):
#     if message.text == '–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å':
#         r = session.get_wallet_balance(
#                 accountType='UNIFIED',
#                 coin='USDT',
#             )
#         pnl = round(float(r['result']['list'][0]['coin'][0]['cumRealisedPnl']), 2)
#         totalEquity = round(float(r['result']['list'][0]['totalEquity']), 2)
#         text = f'–ë–∞–ª–∞–Ω—Å: {totalEquity} USDT, –°—É–º–º–∞—Ä–Ω—ã–π P&L: {pnl}, –°—É–º–º–∞—Ä–Ω—ã–π P&L%: {round(pnl / totalEquity * 100, 2)}%'
#         bot.send_message(message.from_user.id, text, parse_mode='Markdown')
import telebot
from asgiref.sync import sync_to_async

from django.conf import settings
from django.contrib.auth.models import User

from pybit.unified_trading import HTTP
from pybit.exceptions import InvalidRequestError

from telebot.async_telebot import AsyncTeleBot
from telebot.async_telebot import types
from telebot.asyncio_handler_backends import State, StatesGroup
from telebot.asyncio_storage import StateMemoryStorage
import json

from main.models import Account
from main.models import APIkeys

bot = AsyncTeleBot(settings.BOT_TOKEN, state_storage=StateMemoryStorage())

telebot.logger.setLevel(settings.LOG_LEVEL)


class RegisterStates(StatesGroup):
    api_key = State()
    api_secret = State()
    done = State()


@sync_to_async()
def create_user(message):
    user = User.objects.get_or_create(id=message.from_user.id, username=message.from_user.username)
    return user[0]


@sync_to_async()
def get_account(user):
    return Account.objects.get_or_create(user=user)


@sync_to_async()
def create_api_keys(message, key):
    if key == 'api_key':
        query = APIkeys.objects.get_or_create(user_id=message.from_user.id)
        query[0].api_key = message.text
        query[0].save()
        return query[0]
    elif key == 'api_secret':
        return APIkeys.objects.update(user_id=message.from_user.id, api_secret=message.text)


@sync_to_async()
def get_api_keys(user_id):
    try:
        user_keys = APIkeys.objects.get(user_id=user_id)
    except APIkeys.DoesNotExist:
        user_keys = False
    return user_keys


@bot.message_handler(commands=['help', 'start'])
async def send_welcome(message):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    msg = '–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ë–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Bybit.'
    print(await bot.get_state(user_id))
    if await bot.get_state(user_id) is None:
        if await get_api_keys(user_id):
            await bot.set_state(user_id, RegisterStates.done)
    if await bot.get_state(user_id) == str(RegisterStates.done):
        print('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å')
        btn = types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å')
    else:
        print('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        btn = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    markup.add(btn)
    await bot.send_message(user_id, msg, reply_markup=markup)


def check_registration(func):
    async def wrapper(*args, **kwargs):
        user_id = args[0].from_user.id
        if await bot.get_state(user_id) != str(RegisterStates.done):
            if await get_api_keys(user_id):
                await bot.set_state(user_id, RegisterStates.done)
                f = await func(*args, **kwargs)
                return f
            else:
                f = await send_welcome(*args, **kwargs)
                return f
        else:
            f = await func(*args, **kwargs)
            return f
    return wrapper


@bot.message_handler(state=RegisterStates.api_key)
async def api_key_step(message):
    api_keys = await create_api_keys(message, 'api_key')
    msg = '–í–≤–µ–¥–∏—Ç–µ api_secret:'
    await bot.send_message(message.from_user.id, msg)
    await bot.set_state(message.from_user.id, RegisterStates.api_secret)


@bot.message_handler(state=RegisterStates.api_secret)
async def api_secret_step(message):
    await create_api_keys(message, 'api_secret')
    await check_balance(message)
    msg = '–í—Å—ë –≥–æ—Ç–æ–≤–æ'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å')
    markup.add(btn)
    await bot.send_message(message.from_user.id, msg, reply_markup=markup)
    await bot.set_state(message.from_user.id, RegisterStates.done)


@check_registration
async def check_balance(message):
    user_keys = await get_api_keys(message.from_user.id)
    session = HTTP(
        testnet=False,
        api_key=user_keys.api_key,
        api_secret=user_keys.api_secret,
    )
    try:
        r = session.get_wallet_balance(
            accountType='UNIFIED',
            coin='USDT',
        )
        pnl = round(float(r['result']['list'][0]['coin'][0]['cumRealisedPnl']), 2)
        totalEquity = round(float(r['result']['list'][0]['totalEquity']), 2)
        msg = f'–ë–∞–ª–∞–Ω—Å: {totalEquity} USDT\n–°—É–º–º–∞—Ä–Ω—ã–π P&L: {pnl} USDT\n–°—É–º–º–∞—Ä–Ω—ã–π P&L%: {round(pnl / totalEquity * 100, 2)}%'
    except InvalidRequestError as exc:
        msg = f'{exc}'

    await bot.send_message(message.from_user.id, msg)


@bot.message_handler(commands=['get_ordrers'])
@check_registration
async def get_orders(message):
    await check_registration(message)
    user_keys = await get_api_keys(message.from_user.id)
    session = HTTP(
        testnet=False,
        api_key=user_keys.api_key,
        api_secret=user_keys.api_secret,
    )
    r = session.get_order_history(
        category="linear",
        limit=1,
    )

    msg = json.dumps(r)
    await bot.send_message(message.from_user.id, msg)


@bot.message_handler(content_types=['text'])
async def get_text_messages(message):
    if message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        msg = '- –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ api –∫–ª—é—á, –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ ' \
              'https://www.bybit.com/app/user/api-management.\n' \
              '- –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á".\n' \
              '- "API –∫–ª—é—á–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–æ–π".\n' \
              '- –ù–∞–∑–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "Statistic bot".\n' \
              '- –†–∞–∑—Ä–µ—à–µ–Ω–∏—è API –∫–ª—é—á–∞: –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ, –î–æ—Å—Ç—É–ø –∫ OpenAPI –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É IP —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º: ' \
              '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ip 213.171.28.9\n' \
              '- –ù–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –ï–¥–∏–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å.\n' \
              '- –î–∞–ª—å—à–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏.'
        await bot.send_message(message.from_user.id, msg, reply_markup=types.ReplyKeyboardRemove())
        user = await create_user(message)
        account = await get_account(user)
        msg = '–í–≤–µ–¥–∏—Ç–µ api_key:'
        await bot.send_message(message.from_user.id, msg)
        await bot.set_state(message.from_user.id, RegisterStates.api_key)
    if message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        await check_balance(message)


